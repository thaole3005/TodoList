{"version":3,"sources":["components/globalSetting/LoadindComponent/LoadingComponent.module.css","logo.svg","pages/Header/Header.js","assets/loading/loading.gif","components/globalSetting/LoadindComponent/LoadingComponent.js","templates/HomeTemplate/HomeTemplate.js","components/Home.js","util/settingSystem.js","services/todoListService.js","services/baseService.js","TodoList/TodoListRCC.js","TodoList/TodoListRFC.js","redux/constants/TodoListConst.js","redux/reducers/TodoListReducer.js","redux/actions/TodoListAction.js","TodoList/TodoListThunk.js","TodoList/TodoListSaga.js","App.js","reportWebVitals.js","redux/constants/LoadingConst.js","redux/sagas/TodoListSaga.js","redux/sagas/rootSaga.js","redux/reducers/LoadingReducer.js","redux/configStore.js","index.js"],"names":["module","exports","Header","className","href","id","to","activeClassName","type","placeholder","Component","LoadingComponent","useSelector","rootReducer","LoadingReducer","isLoading","console","log","styleLoading","bgLoading","src","loading","alt","HomeTemplate","props","restParam","render","propsRoute","Home","DOMAIN_API","STATUS_CODE","TodoListService","getTaskListApi","get","addTaskApi","newTask","post","deletaskApi","taskName","delete","finishTaskApi","put","rejectTaskApi","url","Axios","method","model","data","todoListService","TodoListRCC","state","taskList","values","errors","valid","getTaskList","promise","then","response","setState","catch","error","renderTaskTodo","filter","task","status","map","index","onClick","deleteTask","finishTask","renderTaskTodoDone","rejectTask","handleChange","e","target","name","value","newValues","errorMessage","trim","test","newErrors","checkValid","addTask","preventDefault","alert","onSubmit","this","onChange","TodoListRFC","useState","useEffect","GET_TASK_LIST","GET_TASK_LIST_SAGA","ADD_TASK_SAGA","DELETE_TASK_SAGA","FINISH_TASK_SAGA","REJECT_TASK_SAGA","initialState","getTaskListApiAction","dispatch","a","resonse","TodoListRedux","useDispatch","TodoListReducer","addTaskApiAction","deleteTaskApiAction","finishTaskApiAction","rejectTaskApiAction","TodoListSaga","App","exact","path","TodoListThunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DISPLAY_LOADING","HIDE_LOADING","getTaskListSaga","theoDoiGetTaskListSaga","addTaskSaga","theoDoiAddTaskSaga","deleteTaskSaga","theoDoiDeleteTaskSaga","finishTaskSaga","theoDoiFinishTaskSaga","rejectTaskSaga","theoDoiRejectTaskSaga","action","delay","call","takeLatest","rootSaga","all","middleWareSaga","createMiddWareSaga","combineReducers","store","createStore","applyMiddleware","reduxThunk","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e4b0213.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgLoading\":\"LoadingComponent_bgLoading__1RuqF\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            TodoList\r\n          </a>\r\n          \r\n          <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link active\" to=\"/home\" activeClassName=\"bg-white text-dark\">\r\n                  Home <span className=\"sr-only\">(current)</span>\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/todolistRCC\" activeClassName=\"bg-white text-dark\">\r\n                    TodoListRCC\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/todolistRFC\" activeClassName=\"bg-white text-dark\">\r\n                    TodoListRFC\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/todoListThunk\" activeClassName=\"bg-white text-dark\">\r\n                TodoListThunk\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/todoListSaga\" activeClassName=\"bg-white text-dark\">\r\n                TodoListSaga\r\n                </NavLink>\r\n              </li>\r\n            \r\n            </ul>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n              <input\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n              />\r\n              <button\r\n                className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                type=\"submit\"\r\n              >\r\n                Search\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/loading.9ca08101.gif\";","import React from 'react';\r\nimport styleLoading from './LoadingComponent.module.css';\r\nimport loading from '../../../assets/loading/loading.gif';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n//component LoadingComponent quản lí về nghiệp vụ hiển thị/ ẩn icon loading\r\nexport default function LoadingComponent() {\r\n\r\n    const {isLoading} = useSelector(rootReducer => rootReducer.LoadingReducer)\r\n    console.log(\"isLoading\", isLoading);\r\n\r\n    if(isLoading) {\r\n        //nếu isLoading lấy từ reduxStore về là true thì hiển thị loading\r\n            return (\r\n                    <div className = {styleLoading.bgLoading}>\r\n                        <img src = {loading} alt = \"loading\"/>\r\n                    </div>\r\n            )\r\n    } else {\r\n        return '';\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Header from '../../pages/Header/Header';\r\nimport LoadindComponent from './../../components/globalSetting/LoadindComponent/LoadingComponent';\r\n\r\nexport const HomeTemplate = (props) => {\r\n    const {Component, ...restParam} = props;\r\n    return <Route {...restParam} render = {(propsRoute) => {\r\n        return <>\r\n            <Header/>\r\n            <LoadindComponent/>\r\n            <Component {...propsRoute}/>\r\n        </>\r\n    }}\r\n    \r\n    />\r\n}","import React from 'react'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            Home Page\r\n        </div>\r\n    )\r\n}\r\n","export const DOMAIN_API = 'http://svcy.myclass.vn/api/ToDoList';\r\n\r\n\r\n\r\nexport const STATUS_CODE = {\r\n    SUCCESS: 200,\r\n    NOT_FOUND: 400,\r\n    SERVER_ERROR: 500,\r\n}","\r\nimport { BaseService } from './baseService';\r\n\r\n\r\nclass TodoListService extends BaseService{\r\n\r\n    getTaskListApi = () => {\r\n        return this.get('GetAllTask');\r\n    }\r\n\r\n    addTaskApi = (newTask) => {\r\n        return this.post('AddTask', newTask);\r\n    }\r\n\r\n\r\n    deletaskApi = (taskName) => {\r\n        return this.delete(`deleteTask?taskName=${taskName}`);\r\n    }\r\n\r\n    finishTaskApi = (taskName) => {\r\n        return this.put(`doneTask?taskName=${taskName}`);\r\n    }\r\n\r\n    rejectTaskApi = (taskName) => {\r\n        console.log(\"rejectTaskApi\", taskName);\r\n        return this.put(`rejectTask?taskName=${taskName}`);\r\n    }\r\n}\r\n\r\n\r\nexport const todoListService = new TodoListService();","import Axios from 'axios';\r\nimport { DOMAIN_API } from '../util/settingSystem';\r\n\r\n\r\nexport class BaseService {\r\n\r\n    get = (url) => {\r\n        return Axios({\r\n            url: `${DOMAIN_API}/${url}`,\r\n            method: 'GET',\r\n        })\r\n    }\r\n\r\n    delete = (url) => {\r\n        return Axios({\r\n            url: `${DOMAIN_API}/${url}`,\r\n            method: 'DELETE',\r\n           \r\n        })\r\n    }\r\n    \r\n\r\n    post = (url, model) => {\r\n        return Axios({\r\n            url: `${DOMAIN_API}/${url}`,\r\n            method: 'POST',\r\n            data: model,\r\n        })\r\n    }\r\n\r\n    \r\n    put = (url) => {\r\n        return Axios({\r\n            url: `${DOMAIN_API}/${url}`,\r\n            method: 'PUT',\r\n        })\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport './TodoList.css';\r\nimport { todoListService } from './../services/todoListService';\r\nimport Axios from 'axios';\r\n\r\nclass TodoListRCC extends Component {\r\n\r\n    state = {\r\n        taskList: [],\r\n        values: {\r\n            taskName: '',\r\n        },\r\n        errors: {\r\n            taskName: ''\r\n        }, \r\n        valid: true,\r\n    }\r\n\r\n\r\n    //getTaskList là hàm chạy đầu tiên khi load trang web lên => sẽ chạy ở componentDidMount\r\n    getTaskList = () => {\r\n        let promise = todoListService.getTaskListApi();\r\n        // console.log(\"promise\", promise);\r\n        promise.then((response) => {\r\n            let {data} = response;\r\n            // console.log('taskList', data);\r\n            this.setState({\r\n                ...this.state,\r\n                values: {\r\n                    taskName: ''\r\n                },\r\n                taskList: data,\r\n            }, () => {\r\n                // console.log(this.state);\r\n            })\r\n        });\r\n        promise.catch((error) => {\r\n            console.log(\"error in getTaskList\", error);\r\n        })\r\n    }\r\n\r\n\r\n    renderTaskTodo = () => {\r\n        return this.state.taskList.filter(task => !task.status).map((task, index) => {\r\n            return  <li key = {index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                this.deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button className=\"complete\" type = \"button\" onClick = {() => {\r\n                                this.finishTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-check-circle\" />\r\n                            <i className=\"fas fa-check-circle\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n    renderTaskTodoDone = () => {\r\n        return this.state.taskList.filter(task => task.status).map((task, index) => {\r\n            return   <li key={index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                this.deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button type = \"button\" className=\"complete\" onClick = {() => {\r\n                                this.rejectTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-undo\" />\r\n                            <i className=\"fas fa-undo\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleChange = (e) => {\r\n        let {name, value} = e.target;\r\n        // console.log(value);\r\n        let newValues = {...this.state.values, [name]: value};\r\n\r\n        //validation\r\n        let regexString = /^[a-z A-Z]+$/;\r\n        let errorMessage = \"\";\r\n        if(value.trim() === '' || !regexString.test(value)) {\r\n            errorMessage = `${name} is invalid`;\r\n        }\r\n        // console.log(\"errorMessage\", errorMessage);\r\n        let newErrors = {...this.state.errors, [name]: errorMessage};\r\n        // console.log(\"newErrors\", newErrors);\r\n        this.setState({\r\n            ...this.state,\r\n            values: newValues,\r\n            errors: newErrors,\r\n        }, () => {\r\n            this.checkValid();\r\n        })  \r\n    }\r\n\r\n\r\n    checkValid = () => {\r\n        // console.log(\"this.state.errors.taskName\", this.state.errors.taskName);\r\n        if(this.state.errors.taskName !== '') {\r\n            // console.log(\"vào if\");\r\n            this.setState({\r\n                ...this.state,\r\n                valid: false,\r\n            }, () => {\r\n                // console.log(\"this.state sau khi checkValid\", this.state);\r\n            })\r\n        } else {\r\n            // console.log(\"vào else\");\r\n            this.setState({\r\n                ...this.state,\r\n                valid: true,\r\n            }, () => {\r\n                // console.log(\"this.state sau khi checkValid\", this.state);\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    addTask = (e) => {\r\n        e.preventDefault();\r\n        if(!this.state.valid) {\r\n            alert(\"taskName k hợp lệ, chỉ được chứa kí tự chữ\");\r\n            return;\r\n        }\r\n        let newTask = {\r\n            taskName: this.state.values.taskName,\r\n        }\r\n        // console.log(\"newTask\", newTask);\r\n        let promise = todoListService.addTaskApi(newTask);\r\n        promise.then((response) => {\r\n            console.log(\"newTask\", response.data);\r\n            //thêm task mới thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            this.getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    deleteTask = (taskName) => {\r\n        // console.log(\"taskName in deleteTask\", taskName);\r\n        let promise = todoListService.deletaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"deletedTask\", response.data);\r\n            //delete task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            this.getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n    }\r\n\r\n\r\n    finishTask = (taskName) => {\r\n        let promise = todoListService.finishTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"finishTask\", response.data);\r\n            //finish task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            this.getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n    }\r\n\r\n\r\n    rejectTask = (taskName) => {\r\n        // console.log(\"taskName\", taskName);\r\n        let promise = todoListService.rejectTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"rejectTask\", response.data);\r\n            //reject task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            this.getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n        <form onSubmit = {this.addTask}>\r\n            <div>\r\n            <div className=\"card\">\r\n                <div className=\"card__\">\r\n                <img src=\"./img/bgTodoList.png\" />\r\n                </div>\r\n                {/* <h2>hello!</h2> */}\r\n                <div className=\"card__body\">\r\n                <div className=\"card__content\">\r\n                    <div className=\"card__title\">\r\n                    <h2>My Tasks</h2>\r\n                    <p>2021</p>\r\n                    </div>\r\n                    <div className=\"card__add\">\r\n                        <input name = \"taskName\" value = {this.state.values.taskName} id=\"newTask\" onChange = {this.handleChange} type=\"text\" placeholder=\"Enter an activity...\" />\r\n                        <button id=\"addItem\" type = \"button\" onClick = {this.addTask}>\r\n                            <i className=\"fa fa-plus\" />\r\n                        </button>\r\n\r\n                    </div>\r\n                    <p className=\"text-danger\"> {this.state.errors.taskName}</p>\r\n                    <div className=\"card__todo\">\r\n                    {/* Uncompleted tasks */}\r\n                    <ul className=\"todo\" id=\"todo\">\r\n                        {this.renderTaskTodo()}\r\n                    \r\n                    </ul>\r\n                    {/* Completed tasks */}\r\n                    <ul className=\"todo\" id=\"completed\">\r\n\r\n                        {this.renderTaskTodoDone()}\r\n                    \r\n                    </ul>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </form>\r\n           \r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTaskList();\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoListRCC;","import React from 'react';\r\nimport './TodoList.css';\r\nimport Axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport { todoListService } from './../services/todoListService';\r\n\r\n\r\n\r\nexport default function TodoListRFC() {\r\n\r\n    const [state, setState] = useState({\r\n        taskList: [],\r\n        values: {\r\n            taskName: '',\r\n        },\r\n        errors: {\r\n            taskName: ''\r\n        },\r\n        \r\n    })\r\n  \r\n    const getTaskList = () => {\r\n        let promise = todoListService.getTaskListApi();\r\n        // console.log(\"promise\", promise);\r\n        promise.then((response) => {\r\n            let {data} = response;\r\n            // console.log('taskList', data);\r\n            setState({\r\n                ...state,\r\n                values: {\r\n                    taskName: ''\r\n                },\r\n                taskList: data,\r\n            })\r\n        });\r\n        promise.catch((error) => {\r\n            console.log(\"error in getTaskList\", error);\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getTaskList();\r\n\r\n        //!logic code trong khối lệnh return của ca;;back function dùng khi unmount 1 component nào đó\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const renderTaskTodo = () => {\r\n        return state.taskList.filter(task => !task.status).map((task, index) => {\r\n            return  <li key = {index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button className=\"complete\" type = \"button\" onClick = {() => {\r\n                                finishTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-check-circle\" />\r\n                            <i className=\"fas fa-check-circle\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n    const renderTaskTodoDone = () => {\r\n        return state.taskList.filter(task => task.status).map((task, index) => {\r\n            return   <li key={index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button type = \"button\" className=\"complete\" onClick = {() => {\r\n                                rejectTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-undo\" />\r\n                            <i className=\"fas fa-undo\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        let {name, value} = e.target;\r\n        // console.log(\"value\", value);\r\n\r\n        let newValues = {...state.values};\r\n        newValues[name] = value;\r\n\r\n        let newErrors = {...state.errors};\r\n        let regexString = /^[a-z A-Z]+$/;\r\n\r\n        if (!regexString.test(value) || value.trim() === '') {\r\n            newErrors[name] = name + ' invalid !';\r\n        } else {\r\n            newErrors[name] = '';\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            values: newValues,\r\n            errors: newErrors\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    const addTask = (e) => {\r\n        e.preventDefault();\r\n        // console.log(\"state in addTask\", state);\r\n        if(state.errors.taskName !== '') {\r\n            //nếu như ng dùng nhập sai định dạng thì k đc thêm\r\n            alert(\"taskName k hợp lệ, chỉ được chứa kí tự chữ\");\r\n            return;\r\n        }\r\n        let newTask = {\r\n            taskName: state.values.taskName,\r\n        }\r\n        console.log(\"newTask\", newTask);\r\n        let promise = todoListService.addTaskApi(newTask);\r\n        promise.then((response) => {\r\n            console.log(\"newTask\", response.data);\r\n            //thêm task mới thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    const deleteTask = (taskName) => {\r\n        // console.log(\"taskName in deleteTask\", taskName);\r\n        let promise = todoListService.deletaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"deletedTask\", response.data);\r\n            //delete task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n    }\r\n\r\n\r\n    const finishTask = (taskName) => {\r\n        let promise = todoListService.finishTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"finishTask\", response.data);\r\n            //finish task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n    }\r\n\r\n\r\n    const rejectTask = (taskName) => {\r\n        // console.log(\"taskName\", taskName);\r\n        let promise = todoListService.rejectTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"rejectTask\", response.data);\r\n            //reject task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            getTaskList();\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n \r\n        <div className=\"card\" onSubmit = {addTask}>\r\n            <div className=\"card__\">\r\n            <img src=\"./img/bgTodoList.png\" />\r\n            </div>\r\n            {/* <h2>hello!</h2> */}\r\n            <div className=\"card__body\">\r\n            <div className=\"card__content\">\r\n                <div className=\"card__title\">\r\n                <h2>My Tasks</h2>\r\n                <p>2021</p>\r\n                </div>\r\n                <div className=\"card__add\">\r\n                    <input id=\"newTask\" value = {state.values.taskName} name = \"taskName\" onChange = {handleChange} \r\n                     type=\"text\" placeholder=\"Enter an activity...\" />\r\n                    <button id=\"addItem\" type = \"button\" onClick = {addTask}>\r\n                    <i className=\"fa fa-plus\" />\r\n                    </button>\r\n                </div>\r\n                <p className=\"text-danger\"> {state.errors.taskName}</p>\r\n\r\n                <div className=\"card__todo\">\r\n                {/* Uncompleted tasks */}\r\n                <ul className=\"todo\" id=\"todo\">\r\n                    {renderTaskTodo()}    \r\n                </ul>\r\n                {/* Completed tasks */}\r\n                <ul className=\"todo\" id=\"completed\">\r\n                {renderTaskTodoDone()}        \r\n                </ul>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","//? -----------ACTION THƯỜNG--------\r\nexport const GET_TASK_LIST = 'GET_TASK_LIST';\r\n\r\n\r\n\r\n//? -----------ACTION SAGA--------\r\n\r\nexport const GET_TASK_LIST_SAGA = 'GET_TASK_SAGA';\r\nexport const ADD_TASK_SAGA = 'ADD_TASK_SAGA';\r\nexport const DELETE_TASK_SAGA = 'DELETE_TASK_SAGA';\r\nexport const FINISH_TASK_SAGA = 'DONE_TASK_SAGA';\r\nexport const REJECT_TASK_SAGA = 'REJECT_TASK_SAGA';","\r\nimport { GET_TASK_LIST } from './../constants/TodoListConst';\r\n\r\nconst initialState = {\r\n    taskList: [],\r\n}\r\n\r\nexport const TodoListReducer =(state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case GET_TASK_LIST: {\r\n            state.taskList = action.taskList;\r\n            return { ...state};\r\n        }\r\n\r\n        default: {\r\n            \r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { todoListService } from \"../../services/todoListService\";\r\nimport { STATUS_CODE } from \"../../util/settingSystem\";\r\nimport { GET_TASK_API } from \"../constants/TodoListConst\";\r\nimport { GET_TASK_LIST } from './../constants/TodoListConst';\r\n\r\n//* có 2 cách làm: Dùng promise rồi .then .catch hoặc dùng async hàm call back (dispatch) và await Axios(call api trả về 1 promise) để lấy đc response\r\n\r\n\r\n\r\nexport const getTaskListApiAction = () => {\r\n\r\n       //!c1:\r\n    // return dispatch => {\r\n    //     let promise = todoListService.getTaskListApi();\r\n    //     // console.log(\"promise\", promise);\r\n    //     promise.then((response) => {\r\n    //         let {data} = response;\r\n    //         // console.log('taskList data', data);\r\n    //         //dispatch mảng taskList lấy đc từ server về lưu trên reduxStore\r\n    //         dispatch({\r\n    //             type: GET_TASK_LIS,\r\n    //             taskList: data,\r\n    //         })\r\n\r\n            \r\n    //     });\r\n    //     promise.catch((error) => {\r\n    //         console.log(\"error in getTaskList\", error);\r\n    //     })\r\n    // }\r\n\r\n\r\n    //!c2:\r\n    return async dispatch => {\r\n        try {\r\n            let response = await todoListService.getTaskListApi();\r\n        if(response.status === STATUS_CODE.SUCCESS) {\r\n\r\n            console.log(\"taskList data\", response.data);\r\n            dispatch({\r\n                         type: GET_TASK_LIST,\r\n                         taskList: response.data,\r\n             })\r\n        }\r\n        } catch (error) {\r\n            console.log(\"error\", error.resonse.data);\r\n        }\r\n   \r\n    }\r\n}\r\n\r\n\r\n\r\nexport const addTaskApiAction = (newTask) => {\r\n    return async dispatch => {\r\n\r\n        try {\r\n        //xử lí trước khi dispatch\r\n        // console.log(\"newTask\", newTask);\r\n        let {data, status} = await todoListService.addTaskApi(newTask);\r\n        console.log(\"newTask\", data);\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            //nếu thêm task thành công thì gọi lại action thunk để lấy taskList mới nhất hiển thị\r\n            dispatch(getTaskListApiAction());\r\n        }\r\n    \r\n       \r\n        } catch (error) {\r\n            console.log(\"error\", error.resonse.data);\r\n        }\r\n\r\n       \r\n    }\r\n}\r\n\r\n\r\nexport const deleteTaskApiAction = (taskName) => {\r\n\r\n    return dispatch => {\r\n               // console.log(\"taskName in deleteTask\", taskName);\r\n               let promise = todoListService.deletaskApi(taskName);\r\n               promise.then((response) => {\r\n                   console.log(\"deletedTask\", response.data);\r\n                   //delete task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n                   dispatch(getTaskListApiAction());\r\n               })\r\n               promise.catch((error) => {\r\n                   alert(error.response.data);\r\n               });\r\n    }\r\n}\r\n\r\n\r\nexport const finishTaskApiAction = (taskName) => {\r\n    return dispatch => {\r\n        let promise = todoListService.finishTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"finishTask\", response.data);\r\n            //finish task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            dispatch(getTaskListApiAction());\r\n\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const rejectTaskApiAction = (taskName) => {\r\n    return dispatch => {\r\n        let promise = todoListService.rejectTaskApi(taskName);\r\n        promise.then((response) => {\r\n            console.log(\"rejectTask\", response.data);\r\n            //reject task thành công thì gọi lại hàm getTaskList để hiển thị task mới nhất\r\n            dispatch(getTaskListApiAction());\r\n        })\r\n        promise.catch((error) => {\r\n            alert(error.response.data);\r\n        });\r\n\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport { todoListService } from '../services/todoListService';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { TodoListReducer } from '../redux/reducers/TodoListReducer';\r\n\r\nimport { addTaskApiAction, finishTaskApiAction, getTaskListApiAction, rejectTaskApiAction } from '../redux/actions/TodoListAction';\r\nimport { deleteTaskApiAction } from './../redux/actions/TodoListAction';\r\n\r\nexport default function TodoListRedux() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    //laasy taskList từ redux xuống\r\n    const {taskList} = useSelector(state => state.TodoListReducer);\r\n    // console.log(\"taskList\", taskList);\r\n\r\n    const [state, setState] = useState({\r\n        \r\n        values: {\r\n            taskName: '',\r\n        },\r\n        errors: {\r\n            taskName: ''\r\n        },\r\n        \r\n    })\r\n\r\n    // console.log(\"state\", state);\r\n  \r\n    const getTaskList = () => {\r\n    \r\n        dispatch(getTaskListApiAction())\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTaskList();\r\n\r\n        //!logic code trong khối lệnh return của ca;;back function dùng khi unmount 1 component nào đó\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const renderTaskTodo = () => {\r\n        return taskList.filter(task => !task.status).map((task, index) => {\r\n            return  <li key = {index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button className=\"complete\" type = \"button\" onClick = {() => {\r\n                                finishTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-check-circle\" />\r\n                            <i className=\"fas fa-check-circle\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n    const renderTaskTodoDone = () => {\r\n        return taskList.filter(task => task.status).map((task, index) => {\r\n            return   <li key={index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button type = \"button\" className=\"complete\" onClick = {() => {\r\n                                rejectTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-undo\" />\r\n                            <i className=\"fas fa-undo\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        let {name, value} = e.target;\r\n        // console.log(\"value\", value);\r\n\r\n        let newValues = {...state.values};\r\n        newValues[name] = value;\r\n\r\n        let newErrors = {...state.errors};\r\n        let regexString = /^[a-z A-Z]+$/;\r\n\r\n        if (!regexString.test(value) || value.trim() === '') {\r\n            newErrors[name] = name + ' invalid !';\r\n        } else {\r\n            newErrors[name] = '';\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            values: newValues,\r\n            errors: newErrors\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    const addTask = (e) => {\r\n        e.preventDefault();\r\n        // console.log(\"state in addTask\", state);\r\n        if(state.errors.taskName !== '') {\r\n            //nếu như ng dùng nhập sai định dạng thì k đc thêm\r\n            alert(\"taskName k hợp lệ, chỉ được chứa kí tự chữ\");\r\n            return;\r\n        }\r\n        let newTask = {\r\n            taskName: state.values.taskName,\r\n        }\r\n\r\n        //sau khi xử lí lấy dữ liệu ng dùng nhập => gọi action addTaskApi()\r\n        dispatch(addTaskApiAction(newTask));\r\n\r\n        //sau khi addTask thành công thì xóa nội dung ở input\r\n        setState({\r\n            ...state,\r\n            values: {\r\n                taskName: ''\r\n            },\r\n          \r\n        });\r\n    }\r\n\r\n\r\n    const deleteTask = (taskName) => {\r\n        dispatch(deleteTaskApiAction(taskName));\r\n    }\r\n\r\n\r\n    const finishTask = (taskName) => {\r\n  \r\n        dispatch(finishTaskApiAction(taskName));\r\n\r\n    }\r\n\r\n\r\n    const rejectTask = (taskName) => {\r\n        // console.log(\"taskName\", taskName);\r\n       dispatch(rejectTaskApiAction(taskName));\r\n    }\r\n\r\n\r\n\r\n    return (\r\n \r\n        <form className=\"card\" onSubmit = {addTask}>\r\n            <div className=\"card__\">\r\n            <img src=\"./img/bgTodoList.png\" />\r\n            </div>\r\n            {/* <h2>hello!</h2> */}\r\n            <div className=\"card__body\">\r\n            <div className=\"card__content\">\r\n                <div className=\"card__title\">\r\n                <h2>My Tasks</h2>\r\n                <p>2021</p>\r\n                </div>\r\n                <div className=\"card__add\">\r\n                    <input id=\"newTask\" value = {state.values.taskName} name = \"taskName\" onChange = {handleChange} \r\n                     type=\"text\" placeholder=\"Enter an activity...\" />\r\n                    <button id=\"addItem\" type = \"button\" onClick = {addTask}>\r\n                    <i className=\"fa fa-plus\" />\r\n                    </button>\r\n                </div>\r\n                <p className=\"text-danger\"> {state.errors.taskName}</p>\r\n\r\n                <div className=\"card__todo\">\r\n                {/* Uncompleted tasks */}\r\n                <ul className=\"todo\" id=\"todo\">\r\n                    {renderTaskTodo()}    \r\n                </ul>\r\n                {/* Completed tasks */}\r\n                <ul className=\"todo\" id=\"completed\">\r\n                {renderTaskTodoDone()}        \r\n                </ul>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport './TodoList.css';\r\nimport { todoListService } from '../services/todoListService';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_TASK_SAGA, DELETE_TASK_SAGA, GET_TASK_LIST_SAGA, REJECT_TASK_SAGA } from '../redux/constants/TodoListConst';\r\nimport { FINISH_TASK_SAGA } from './../redux/constants/TodoListConst';\r\n\r\nexport default function TodoListSaga() {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    //laasy taskList từ redux xuống\r\n    const {taskList} = useSelector(state => state.TodoListReducer);\r\n    // console.log(\"taskList\", taskList);\r\n\r\n    const [state, setState] = useState({\r\n        \r\n        values: {\r\n            taskName: '',\r\n        },\r\n        errors: {\r\n            taskName: ''\r\n        },\r\n        \r\n    })\r\n\r\n    // console.log(\"state\", state);\r\n  \r\n    const getTaskList = () => {\r\n        //gọi action saga để call api lấy taskList từ server\r\n        dispatch({\r\n            type: GET_TASK_LIST_SAGA,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTaskList();\r\n\r\n        //!logic code trong khối lệnh return của ca;;back function dùng khi unmount 1 component nào đó\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const renderTaskTodo = () => {\r\n        return taskList.filter(task => !task.status).map((task, index) => {\r\n            return  <li key = {index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button className=\"complete\" type = \"button\" onClick = {() => {\r\n                                finishTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-check-circle\" />\r\n                            <i className=\"fas fa-check-circle\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n    const renderTaskTodoDone = () => {\r\n        return taskList.filter(task => task.status).map((task, index) => {\r\n            return   <li key={index}>\r\n                        <span>{task.taskName}</span>\r\n                        <div className=\"buttons\">\r\n                            <button type = \"button\" className=\"remove\" onClick = {() => {\r\n                                deleteTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"fa fa-trash-alt\" />\r\n                            </button>\r\n                            <button type = \"button\" className=\"complete\" onClick = {() => {\r\n                                rejectTask(task.taskName)\r\n                            }}>\r\n                            <i className=\"far fa-undo\" />\r\n                            <i className=\"fas fa-undo\" />\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        let {name, value} = e.target;\r\n        // console.log(\"value\", value);\r\n\r\n        let newValues = {...state.values};\r\n        newValues[name] = value;\r\n\r\n        let newErrors = {...state.errors};\r\n        let regexString = /^[a-z A-Z]+$/;\r\n\r\n        if (!regexString.test(value) || value.trim() === '') {\r\n            newErrors[name] = name + ' invalid !';\r\n        } else {\r\n            newErrors[name] = '';\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            values: newValues,\r\n            errors: newErrors\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    const addTask = (e) => {\r\n        e.preventDefault();\r\n        if(state.errors.taskName !== '') {\r\n            //nếu như ng dùng nhập sai định dạng thì k đc thêm\r\n            alert(\"taskName k hợp lệ, chỉ được chứa kí tự chữ\");\r\n            return;\r\n        }\r\n        let newTask = {\r\n            taskName: state.values.taskName,\r\n        }\r\n        dispatch({\r\n            type: ADD_TASK_SAGA,\r\n            newTask,\r\n        });\r\n\r\n          //sau khi addTask thành công thì xóa nội dung ở input\r\n          setState({\r\n            ...state,\r\n            values: {\r\n                taskName: ''\r\n            },\r\n          \r\n        });\r\n    }\r\n\r\n\r\n    const deleteTask = (taskName) => {\r\n       //dispatch action delete saga\r\n       dispatch({\r\n        type: DELETE_TASK_SAGA,\r\n        taskName,\r\n    });\r\n    }\r\n\r\n\r\n    const finishTask = (taskName) => {\r\n        dispatch({\r\n            type: FINISH_TASK_SAGA,\r\n            taskName,\r\n        });\r\n    }\r\n\r\n\r\n    const rejectTask = (taskName) => {\r\n        dispatch({\r\n            type: REJECT_TASK_SAGA,\r\n            taskName,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return (\r\n \r\n        <form className=\"card\" onSubmit = {addTask}>\r\n            <div className=\"card__\">\r\n            <img src=\"./img/bgTodoList.png\" />\r\n            </div>\r\n            {/* <h2>hello!</h2> */}\r\n            <div className=\"card__body\">\r\n            <div className=\"card__content\">\r\n                <div className=\"card__title\">\r\n                <h2>My Tasks</h2>\r\n                <p>2021</p>\r\n                </div>\r\n                <div className=\"card__add\">\r\n                    <input id=\"newTask\" value = {state.values.taskName} name = \"taskName\" onChange = {handleChange} \r\n                     type=\"text\" placeholder=\"Enter an activity...\" />\r\n                    <button id=\"addItem\" type = \"button\" onClick = {addTask}>\r\n                    <i className=\"fa fa-plus\" />\r\n                    </button>\r\n                </div>\r\n                <p className=\"text-danger\"> {state.errors.taskName}</p>\r\n\r\n                <div className=\"card__todo\">\r\n                {/* Uncompleted tasks */}\r\n                <ul className=\"todo\" id=\"todo\">\r\n                    {renderTaskTodo()}    \r\n                </ul>\r\n                {/* Completed tasks */}\r\n                <ul className=\"todo\" id=\"completed\">\r\n                {renderTaskTodoDone()}        \r\n                </ul>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport { HomeTemplate } from './templates/HomeTemplate/HomeTemplate';\nimport Home from './components/Home';\nimport TodoListRCC from './TodoList/TodoListRCC.js';\nimport TodoListRFC from './TodoList/TodoListRFC';\nimport TodoListThunk from './TodoList/TodoListThunk';\nimport TodoListSaga from './TodoList/TodoListSaga';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        \n          <HomeTemplate exact path = \"/\" Component={Home}/>\n          <HomeTemplate exact path = \"/home\" Component={Home}/>\n          <HomeTemplate exact path = \"/todolistRCC\" Component={TodoListRCC}/>\n          <HomeTemplate exact path = \"/todolistRFC\" Component={TodoListRFC}/>\n          <HomeTemplate exact path = \"/todoListThunk\" Component={TodoListThunk}/>\n          <HomeTemplate exact path = \"/todoListSaga\" Component={TodoListSaga}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const HIDE_LOADING = 'HIDE_LOADING';","import {fork, take, takeEvery,delay, takeLatest,call, put } from 'redux-saga/effects';\r\nimport { STATUS_CODE } from '../../util/settingSystem';\r\nimport { ADD_TASK_SAGA, DELETE_TASK_SAGA, FINISH_TASK_SAGA, GET_TASK_LIST_SAGA, REJECT_TASK_SAGA } from '../constants/TodoListConst';\r\nimport { todoListService } from './../../services/todoListService';\r\nimport { GET_TASK_LIST } from './../constants/TodoListConst';\r\nimport { DISPLAY_LOADING, HIDE_LOADING } from './../constants/LoadingConst';\r\n\r\n\r\nexport function *getTaskListSaga(action) {\r\n\r\n    yield put ({\r\n        type: DISPLAY_LOADING,\r\n    })\r\n\r\n    //!code ở trên yield delay sẽ thực hiện và đợi 1s rồi mới đc thực hiện code ở bên dưới\r\n    yield delay(1000);\r\n\r\n    try {\r\n        let {data, status} = yield call (() => todoListService.getTaskListApi());\r\n\r\n        //nếu call api và lấy data (mảng taskList từ server thì dispatch lên reduxStore)\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_LIST,\r\n                taskList: data,\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"error\", error.response.data);\r\n    }\r\n\r\n    yield put ({\r\n        type: HIDE_LOADING,\r\n    })\r\n\r\n}\r\n\r\n\r\nexport function *theoDoiGetTaskListSaga() {\r\n    yield takeLatest(GET_TASK_LIST_SAGA, getTaskListSaga)\r\n}\r\n\r\n\r\n\r\n\r\nfunction * addTaskSaga(action) {\r\n    \r\n    try {\r\n        let {newTask} = action;\r\n        let {data, status} = yield call (() => todoListService.addTaskApi(newTask));\r\n\r\n        //nếu call api và lấy data (mảng taskList từ server thì dispatch lên reduxStore)\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_LIST_SAGA,\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"error\", error.response.data);\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport function * theoDoiAddTaskSaga() {\r\n    yield takeLatest(ADD_TASK_SAGA, addTaskSaga);\r\n}\r\n\r\n\r\n\r\nfunction * deleteTaskSaga(action) {\r\n    \r\n    try {\r\n        let {taskName} = action;\r\n        let {data, status} = yield call (() => todoListService.deletaskApi(taskName));\r\n\r\n        //nếu call api và lấy data (mảng taskList từ server thì dispatch lên reduxStore)\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_LIST_SAGA,\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"error\", error.response.data);\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport function * theoDoiDeleteTaskSaga() {\r\n    yield takeLatest(DELETE_TASK_SAGA, deleteTaskSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction * finishTaskSaga(action) {\r\n    \r\n    try {\r\n        let {taskName} = action;\r\n        let {data, status} = yield call (() => todoListService.finishTaskApi(taskName));\r\n\r\n        //nếu call api và lấy data (mảng taskList từ server thì dispatch lên reduxStore)\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_LIST_SAGA,\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"error\", error.response.data);\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport function * theoDoiFinishTaskSaga() {\r\n    yield takeLatest(FINISH_TASK_SAGA, finishTaskSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction * rejectTaskSaga(action) {\r\n    \r\n    try {\r\n        let {taskName} = action;\r\n        let {data, status} = yield call (() => todoListService.rejectTaskApi(taskName));\r\n\r\n        //nếu call api và lấy data (mảng taskList từ server thì dispatch lên reduxStore)\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_LIST_SAGA,\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"error\", error.response.data);\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport function * theoDoiRejectTaskSaga() {\r\n    yield takeLatest(REJECT_TASK_SAGA, rejectTaskSaga);\r\n}","\r\nimport {fork, take, takeEvery,delay, takeLatest,call, put, all } from 'redux-saga/effects';\r\nimport * as TodoListSaga from './TodoListSaga';\r\n\r\nexport function * rootSaga() {\r\n\r\n    //!yield all nhận vào mảng các generator function để theo dõi các actionSaga\r\n   yield all([\r\n    TodoListSaga.theoDoiGetTaskListSaga(),\r\n    TodoListSaga.theoDoiAddTaskSaga(),\r\n    TodoListSaga.theoDoiDeleteTaskSaga(),\r\n    TodoListSaga.theoDoiFinishTaskSaga(),\r\n    TodoListSaga.theoDoiRejectTaskSaga(),\r\n   ])\r\n}","import { DISPLAY_LOADING, HIDE_LOADING } from './../constants/LoadingConst';\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n}\r\n\r\nexport const LoadingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n    case DISPLAY_LOADING: {\r\n\r\n        return { ...state, isLoading: true};\r\n    }\r\n\r\n    case HIDE_LOADING: {\r\n\r\n        return { ...state, isLoading: false};\r\n    }\r\n\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport { TodoListReducer } from './reducers/TodoListReducer';\r\nimport reduxThunk from 'redux-thunk';\r\n\r\n//middleware saga\r\nimport createMiddWareSaga from 'redux-saga';\r\nimport { rootSaga } from './sagas/rootSaga';\r\nimport { LoadingReducer } from './reducers/LoadingReducer';\r\nconst middleWareSaga = createMiddWareSaga();\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    //nơi khai báo các state của ứng dụng\r\n    TodoListReducer,\r\n    LoadingReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(reduxThunk, middleWareSaga));\r\n\r\n\r\n//goij saga bằng hàm run, hàm run nhận vào rootsaga\r\nmiddleWareSaga.run(rootSaga)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//config redux\nimport {Provider} from 'react-redux';\nimport { store } from './redux/configStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}